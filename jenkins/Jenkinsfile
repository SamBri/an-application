// Jenkinsfile (Declarative Pipeline)
pipeline {
   agent any
   
   stages {
      stage('Build') {
         steps {
            echo 'Building stage'     
            sh 'mvn clean package'
            
            
         }
      }
      
      stage('Deploy') {
         when {
            expression {
               currentBuild.result == null || currentBuild.result == 'SUCCESS'
            }
         }
         
         environment {
            //    DEBUG_FLAGS = '-g'
            NAME = """${sh(
            returnStdout:true,
            script: 'mvn -q -DforceStdout help:evaluate -Dexpression=project.name'
            )
         }"""
         // mvn -q -DforceStdout help:evaluate -Dexpression=project.name
         VERSION =  """${sh(
         returnStdout: true,
         script:'mvn -q -DforceStdout help:evaluate -Dexpression=project.version'
         )
      }"""
      
   }
   
   // jenkins over ssh --
   steps {
      sh 'printenv'
      sh 'echo $NAME'
      sh 'echo $VERSION'
      echo 'delivering app for deployment.'
      echo 'remove old build'
      sh 'ssh  appuser@192.168.0.190 "rm -rf /home/appuser/apps/$NAME-$VERSION.jar"'
      sh 'scp ./target/$NAME-$VERSION.jar appuser@192.168.0.190:/home/appuser/apps/'
      echo '@@ kill running java process @@'
      sh 'lsof -i | grep "java" > PID.txt && awk "{ print "$2"}" PID.txt | xargs kill -9'
      sh 'ssh  appuser@192.168.0.190 "nohup java -jar /home/appuser/apps/$NAME-$VERSION.jar > /dev/null 2>&1 &"'
   }
   
   
}


stage('End') {
   steps {
      echo 'done with deployment'
      sh 'echo "done"'
      sh 'exit'
   }
}

}

}